Year = substr(gsub("[^0-9]", "", gdb_name), 1, 4))
tract <- sf::st_read(dsn = dsn, layer = gdb_name)
sf <- dplyr::full_join(tract, pov, by = "GEOID")
# B17017e1 = all households (denominator)
# B17017e2 = households below poverty (numerator)
# Pct_HH_Below_Poverty = B17017e2 / B17017e1 (shortened to 10 char for DBF)
# B17017m1 and B17017m2: note these for validation later (what are they?)
# add people in poverty and all people
# from the lookup table: B17021,0055,1 = total individuals (B17021e1)
#                        B17021,0055,2 = below poverty     (B17021e2)
sf <- dplyr::rename(sf, HHPov = !!dplyr::sym("B17017e2"),
HHTotal = !!dplyr::sym("B17017e1"),
PopPov = !!dplyr::sym("B17021e2"),
PopTotal = !!dplyr::sym("B17021e1"))
sf <- dplyr::select(sf, !!dplyr::sym("Year"), !!dplyr::sym("GEOID"),
!!dplyr::sym("HHPov"), !!dplyr::sym("HHTotal"),
!!dplyr::sym("PopPov"), !!dplyr::sym("PopTotal"))
sf <- dplyr::mutate(sf,
PctHHPov = 100 * !!dplyr::sym("HHPov") / !!dplyr::sym("HHTotal"),
PctHHPov = ifelse(!is.finite(!!dplyr::sym("PctHHPov")), 0,
!!dplyr::sym("PctHHPov")),
PctPopPov = 100 * !!dplyr::sym("PopPov") / !!dplyr::sym("PopTotal"),
PctPopPov = ifelse(!is.finite(!!dplyr::sym("PctPopPov")), 0,
!!dplyr::sym("PctPopPov")),
RowIdentifier = dplyr::row_number())
# still a simple feature
sf <- dplyr::select(sf, !!dplyr::sym("RowIdentifier"), !!dplyr::sym("Year"),
!!dplyr::sym("GEOID"), !!dplyr::sym("HHTotal"),
!!dplyr::sym("HHPov"), !!dplyr::sym("PctHHPov"),
!!dplyr::sym("PopTotal"), !!dplyr::sym("PopPov"),
!!dplyr::sym("PctPopPov"))
return(sf)
}
p <- process_poverty(readpath = "C:/Users/AStamm/git/CDC_CWGs/CommDes/data/ACS",
gdb_name = "ACS_2018_5YR_TRACT_36_NEW_YORK",
layer_name = "X17_POVERTY")
p
plot(p$Shape)
class(p)
"sf" %in% class(p)
"sf" %in% class(pov)
"sf" %in% class(tract)
process_fars <- function(readpath,shp_name,  years, tract_id,
my_state, data_check = FALSE) {
all_deaths <- read_fars(filepath = readpath, years = years,
my_state = my_state)
tract <- read_fars_tract(filepath = readpath, shp_name = shp_name,
id = tract_id)
xy <- join_fars(fars = all_deaths, tract = tract)
final <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
if (data_check) {
# do your points overlap your tracts?
plot(sf::st_geometry(tract), col = "transparent", border = "blue")
plot(sf::st_geometry(xy), col = "red", pch = 20, add = TRUE)
}
return(final)
}
process_fars <- function(readpath,shp_name,  years, tract_id,
my_state, data_check = FALSE) {
all_deaths <- read_fars(filepath = readpath, years = years,
my_state = my_state)
tract <- read_fars_tract(filepath = readpath, shp_name = shp_name,
id = tract_id)
xy <- join_fars(fars = all_deaths, tract = tract)
final <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
if (data_check) {
# do your points overlap your tracts?
plot(sf::st_geometry(tract), col = "transparent", border = "blue")
plot(sf::st_geometry(xy), col = "red", pch = 20, add = TRUE)
}
return(final)
}
read_fars <- function(filepath, years, my_state) {
# read the yearly datasets into lists
#---- read accidents ----
d <- list()
for (i in years) {
fars_path <- paste0(filepath, "/FARS", i, "NationalCSV/ACCIDENT.CSV")
d[[i]] <- utils::read.csv(fars_path)
}
a <- dplyr::bind_rows(d) # turn the list into a data frame (table)
a <- dplyr::filter(a, !!dplyr::sym("STATE") == my_state) # in-state accidents
a <- dplyr::select(a, !!dplyr::sym("YEAR"), !!dplyr::sym("ST_CASE"),
!!dplyr::sym("FATALS"), !!dplyr::sym("LATITUDE"),
!!dplyr::sym("LONGITUD"))
#---- read persons ----
d <- list()
for (i in years) {
fars_path <- paste0(filepath, "/FARS", i, "NationalCSV/PERSON.CSV")
d[[i]] <- utils::read.csv(fars_path)
d[[i]]$YEAR <- i
}
p <- dplyr::bind_rows(d)
p <- dplyr::select(p, !!dplyr::sym("YEAR"), !!dplyr::sym("ST_CASE"),
!!dplyr::sym("PER_NO"), !!dplyr::sym("DOA"),
!!dplyr::sym("VEH_NO"), !!dplyr::sym("INJ_SEV"))
p <- dplyr::right_join(p, a, by = c("YEAR", "ST_CASE"))
#---- read pedestrians ----
d <- list()
for (i in years) {
fars_path <- paste0(filepath, "/FARS", i, "NationalCSV/PBTYPE.CSV")
d[[i]] <- utils::read.csv(fars_path)
d[[i]]$YEAR <- i
}
f <- dplyr::bind_rows(d)
f <- dplyr::select(f, !!dplyr::sym("YEAR"), !!dplyr::sym("ST_CASE"),
!!dplyr::sym("VEH_NO"), !!dplyr::sym("PER_NO"),
!!dplyr::sym("PBPTYPE"))
f <- dplyr::right_join(f, p, by = c("YEAR", "ST_CASE", "VEH_NO", "PER_NO"))
#---- prep final dataset ----
# subset only valid coordinates
# this is our final fatalities dataset
all <- dplyr::mutate(f,
died = !!dplyr::sym("INJ_SEV") == 4, # deaths up to 28 days later
died_ped = !!dplyr::sym("died") & !!dplyr::sym("PBPTYPE") == 5,
died_cycle = !!dplyr::sym("died") & !!dplyr::sym("PBPTYPE") %in% 6:7)
all <- dplyr::filter(all, !!dplyr::sym("died"),      # only deaths
!!dplyr::sym("LONGITUD") < 0) # only valid coordinates
return(all)
}
read_fars_tract <- function(filepath, shp_name, id) {
tract <- sf::st_read(dsn = filepath, layer = shp_name)
tract <- dplyr::select(tract, !!dplyr::sym(id))
tract <- dplyr::rename(tract, GEOID = !!dplyr::sym(id))
return(tract)
}
join_fars <- function(fars, tract) {
# plot fatality coordinates
xy <- sf::st_as_sf(fars, coords = c("LONGITUD", "LATITUDE"),
crs = raster::crs(tract))
# intersect the two sf objects
# this assigns tracts to point-level data
# note the warning, but in my experience, it can generally be ignored
# this step may be slow if you have a lot of people involved
sf <- sf::st_intersection(xy, tract)
return(sf)
}
summarize_fars <- function(fars, tract, my_state) {
s <- data.frame(fars) # convert sf to data frame (table)
s <- dplyr::group_by(s, !!dplyr::sym("GEOID"), !!dplyr::sym("YEAR"))
s <- dplyr::summarise(s,
Accidents = length(unique(!!dplyr::sym("ST_CASE"))),
DeathsAll = sum(!!dplyr::sym("died")),
DeathsPed = sum(!!dplyr::sym("died_ped")),
DeathsCyc = sum(!!dplyr::sym("died_cycle")))
s <- dplyr::rename(s, Year = !!dplyr::sym("YEAR"))
years <- unique(s$Year)
y <- dplyr::full_join(tract, data.frame(Year = years), by = character())
y <- dplyr::left_join(y, s, by = c("GEOID", "Year"))
y <- dplyr::mutate(y, StateFIPSCode = my_state,
RowIdentifier = dplyr::row_number())
y <- data.frame(y)
y <- dplyr::select(y, !!dplyr::sym("StateFIPSCode"), !!dplyr::sym("RowIdentifier"),
!!dplyr::sym("Year"), !!dplyr::sym("GEOID"),
!!dplyr::sym("Accidents"), !!dplyr::sym("DeathsAll"),
!!dplyr::sym("DeathsPed"), !!dplyr::sym("DeathsCyc"))
y[is.na(y)] <- 0
return(y)
}
readpath = "C:/Users/AStamm/git/CDC_CWGs/CommDes/data/fatality"
shp_name = "tl_2010_36_tract10"
years = 2014
tract_id = "GEOID10"
my_state = 36
data_check = FALSE
all_deaths <- read_fars(filepath = readpath, years = years,
my_state = my_state)
tract <- read_fars_tract(filepath = readpath, shp_name = shp_name,
id = tract_id)
xy <- join_fars(fars = all_deaths, tract = tract)
plot(tract$geometry)
plot(sf::st_geometry(xy), col = "red", pch = 20, add = TRUE)
final <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
final
head(final)
sum <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
head(sum)
head(tract)
final <- dplyr::full_join(tract, sum, by = "GEOID")
plot(sf::st_geometry(final), col = "transparent", border = "blue")
names(final)
plot(final$DeathsAll, breaks = "jenks")
plot(final[, "DeathsAll"], breaks = "jenks")
cols <- c("#fef0d9", "#fdcc8a", "#fc8d59", "#d7301f")
plot(final[, "DeathsAll"], breaks = "quantile", pal = cols,
main = "Choropleth of all deaths")
plot(final[, "DeathsAll"], breaks = "quartile", pal = cols,
main = "Choropleth of all deaths")
?plot
plot(final[, "DeathsAll"], breaks = "quantile", pal = cols,
main = "Choropleth of all deaths", nbreaks = 3)
plot(final[, "DeathsAll"], breaks = "jenks", pal = cols,
main = "Choropleth of all deaths", nbreaks = 3)
cols <- c("#fef0d9", "#fdcc8a", "#fc8d59", "#d7301f", "#980043")
plot(final[, "DeathsAll"], breaks = "jenks", pal = cols,
main = "Choropleth of all deaths")
cols <- c("#fef0d9", "#fdcc8a", "#fc8d59", "#d7301f", "#980043", "#980043")
plot(final[, "DeathsAll"], breaks = "jenks", pal = cols,
main = "Choropleth of all deaths")
cols <- c("white", "#fef0d9", "#fdcc8a", "#fc8d59", "#d7301f")
plot(final[, "DeathsAll"], breaks = "quantile", pal = cols,
main = "Choropleth of all deaths")
cols <- c("white", "#fef0d9", "#fdcc8a", "#fc8d59", "#d7301f")
plot(final[, "DeathsAll"], breaks = "quantile", pal = cols, n = 4,
main = "Choropleth of all deaths")
cols
plot(final[, "DeathsAll"], breaks = "quantile", pal = "reds",
main = "Choropleth of all deaths")
hcl.colors(10)
hcl.colors(4)
plot(final[, "DeathsAll"], breaks = "quantile", pal = hcl.colors(4),
main = "Choropleth of all deaths")
plot(final[, "DeathsAll"], breaks = "quantile", pal = hcl.colors(4),
main = "Choropleth of all deaths", nbreaks = 4)
plot(final[, "DeathsAll"], breaks = "jenks", pal = hcl.colors(4),
main = "Choropleth of all deaths", nbreaks = 4)
summary(final$DeathsAll)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
plot(final[, "DeathsAll"], breaks = "jenks", pal = cols,
main = "Choropleth of all deaths", nbreaks = 3)
hist(final$DeathsAll)
hist(final$DeathsAll, breaks = 100)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
plot(final[, "DeathsAll"], breaks = c(0, 1, 2), pal = cols,
main = "Choropleth of all deaths", nbreaks = 3)
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
brks
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
plot(final[, "DeathsAll"], breaks = brks, pal = cols,
main = "Choropleth of all deaths", nbreaks = 3)
plot(sf::st_geometry(xy), col = "darkgreen", pch = 20, add = TRUE)
plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
plot(final[, "DeathsAll"], breaks = brks, pal = cols,
main = "Choropleth of all deaths", nbreaks = 3)
# do your points overlap your tracts?
plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
sf::st_crs(final)
sf::st_crs(xy)
plot(sf::st_geometry(xy), col = "#004529", pch = 20)
plot(final[, "DeathsAll"], breaks = brks, pal = cols,
main = "Choropleth of all deaths")
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
colcode <- classInt::findColours(cls, cols)
plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
graphics::par(mar=c(2.5,0,2,0), mgp = c(0, 0, 0), xpd = TRUE)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
colcode <- classInt::findColours(cls, cols)
plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
# do your points overlap your tracts?
plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
graphics::par(mar=c(5,4,4,2)+.1, mgp = c(3, 1, 0))
process_fars <- function(readpath,shp_name,  years, tract_id,
my_state, data_check = FALSE) {
all_deaths <- read_fars(filepath = readpath, years = years,
my_state = my_state)
tract <- read_fars_tract(filepath = readpath, shp_name = shp_name,
id = tract_id)
xy <- join_fars(fars = all_deaths, tract = tract)
# to this point, object is SF
sum <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
# rejoin final to tract to create final SF?
final <- dplyr::full_join(tract, sum, by = "GEOID")
if (data_check) {
# plot(sf::st_geometry(final), col = "transparent", border = "blue")
# do your many points correspond with your higher counts?
graphics::par(mar=c(2.5,0,2,0), mgp = c(0, 0, 0), xpd = TRUE)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
colcode <- classInt::findColours(cls, cols)
plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
# do your points overlap your tracts?
plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
graphics::par(mar=c(5,4,4,2)+.1, mgp = c(3, 1, 0))
# should add a legend, too, but don't feel like coding it right now
}
return(final)
}
f <- process_fars(readpath = "C:/Users/AStamm/git/CDC_CWGs/CommDes/data/fatality",
shp_name = "tl_2010_36_tract10",
years = 2014, tract_id = "GEOID10", my_state = 36,
data_check = TRUE)
process_fars <- function(readpath,shp_name,  years, tract_id,
my_state, data_check = FALSE) {
all_deaths <- read_fars(filepath = readpath, years = years,
my_state = my_state)
tract <- read_fars_tract(filepath = readpath, shp_name = shp_name,
id = tract_id)
xy <- join_fars(fars = all_deaths, tract = tract)
# to this point, object is SF
sum <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
# rejoin final to tract to create final SF?
final <- dplyr::full_join(tract, sum, by = "GEOID")
if (data_check) {
# plot(sf::st_geometry(final), col = "transparent", border = "blue")
# do your many points correspond with your higher counts?
graphics::par(mar=c(2.5,0,2,0), mgp = c(0, 0, 0), xpd = TRUE)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll)+1)
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
colcode <- classInt::findColours(cls, cols)
plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
# do your points overlap your tracts?
plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
graphics::par(mar=c(5,4,4,2)+.1, mgp = c(3, 1, 0))
# should add a legend, too, but don't feel like coding it right now
}
return(final)
}
read_fars_tract <- function(filepath, shp_name, id) {
tract <- sf::st_read(dsn = filepath, layer = shp_name)
tract <- dplyr::select(tract, !!dplyr::sym(id))
tract <- dplyr::rename(tract, GEOID = !!dplyr::sym(id))
return(tract)
}
summarize_fars <- function(fars, tract, my_state) {
s <- data.frame(fars) # convert sf to data frame (table)
s <- dplyr::group_by(s, !!dplyr::sym("GEOID"), !!dplyr::sym("YEAR"))
s <- dplyr::summarise(s,
Accidents = length(unique(!!dplyr::sym("ST_CASE"))),
DeathsAll = sum(!!dplyr::sym("died")),
DeathsPed = sum(!!dplyr::sym("died_ped")),
DeathsCyc = sum(!!dplyr::sym("died_cycle")))
s <- dplyr::rename(s, Year = !!dplyr::sym("YEAR"))
years <- unique(s$Year)
y <- dplyr::full_join(tract, data.frame(Year = years), by = character())
y <- dplyr::left_join(y, s, by = c("GEOID", "Year"))
y <- dplyr::mutate(y, StateFIPSCode = my_state,
RowIdentifier = dplyr::row_number())
y <- data.frame(y)
y <- dplyr::select(y, !!dplyr::sym("StateFIPSCode"), !!dplyr::sym("RowIdentifier"),
!!dplyr::sym("Year"), !!dplyr::sym("GEOID"),
!!dplyr::sym("Accidents"), !!dplyr::sym("DeathsAll"),
!!dplyr::sym("DeathsPed"), !!dplyr::sym("DeathsCyc"))
y[is.na(y)] <- 0
return(y)
}
read_fars <- function(filepath, years, my_state) {
# read the yearly datasets into lists
#---- read accidents ----
d <- list()
for (i in years) {
fars_path <- paste0(filepath, "/FARS", i, "NationalCSV/ACCIDENT.CSV")
d[[i]] <- utils::read.csv(fars_path)
}
a <- dplyr::bind_rows(d) # turn the list into a data frame (table)
a <- dplyr::filter(a, !!dplyr::sym("STATE") == my_state) # in-state accidents
a <- dplyr::select(a, !!dplyr::sym("YEAR"), !!dplyr::sym("ST_CASE"),
!!dplyr::sym("FATALS"), !!dplyr::sym("LATITUDE"),
!!dplyr::sym("LONGITUD"))
#---- read persons ----
d <- list()
for (i in years) {
fars_path <- paste0(filepath, "/FARS", i, "NationalCSV/PERSON.CSV")
d[[i]] <- utils::read.csv(fars_path)
d[[i]]$YEAR <- i
}
p <- dplyr::bind_rows(d)
p <- dplyr::select(p, !!dplyr::sym("YEAR"), !!dplyr::sym("ST_CASE"),
!!dplyr::sym("PER_NO"), !!dplyr::sym("DOA"),
!!dplyr::sym("VEH_NO"), !!dplyr::sym("INJ_SEV"))
p <- dplyr::right_join(p, a, by = c("YEAR", "ST_CASE"))
#---- read pedestrians ----
d <- list()
for (i in years) {
fars_path <- paste0(filepath, "/FARS", i, "NationalCSV/PBTYPE.CSV")
d[[i]] <- utils::read.csv(fars_path)
d[[i]]$YEAR <- i
}
f <- dplyr::bind_rows(d)
f <- dplyr::select(f, !!dplyr::sym("YEAR"), !!dplyr::sym("ST_CASE"),
!!dplyr::sym("VEH_NO"), !!dplyr::sym("PER_NO"),
!!dplyr::sym("PBPTYPE"))
f <- dplyr::right_join(f, p, by = c("YEAR", "ST_CASE", "VEH_NO", "PER_NO"))
#---- prep final dataset ----
# subset only valid coordinates
# this is our final fatalities dataset
all <- dplyr::mutate(f,
died = !!dplyr::sym("INJ_SEV") == 4, # deaths up to 28 days later
died_ped = !!dplyr::sym("died") & !!dplyr::sym("PBPTYPE") == 5,
died_cycle = !!dplyr::sym("died") & !!dplyr::sym("PBPTYPE") %in% 6:7)
all <- dplyr::filter(all, !!dplyr::sym("died"),      # only deaths
!!dplyr::sym("LONGITUD") < 0) # only valid coordinates
return(all)
}
join_fars <- function(fars, tract) {
# plot fatality coordinates
xy <- sf::st_as_sf(fars, coords = c("LONGITUD", "LATITUDE"),
crs = raster::crs(tract))
# intersect the two sf objects
# this assigns tracts to point-level data
# note the warning, but in my experience, it can generally be ignored
# this step may be slow if you have a lot of people involved
sf <- sf::st_intersection(xy, tract)
return(sf)
}
f <- process_fars(readpath = "C:/Users/AStamm/git/CDC_CWGs/CommDes/data/fatality",
shp_name = "tl_2010_36_tract10",
years = 2014, tract_id = "GEOID10", my_state = 36,
data_check = TRUE)
head(f)
devtools::check()
?plot
readpath = "C:/Users/AStamm/git/CDC_CWGs/CommDes/data/fatality"
shp_name = "tl_2010_36_tract10"
years = 2014
tract_id = "GEOID10"
my_state = 36
data_check = TRUE
all_deaths <- read_fars(filepath = readpath, years = years,
my_state = my_state)
tract <- read_fars_tract(filepath = readpath, shp_name = shp_name,
id = tract_id)
xy <- join_fars(fars = all_deaths, tract = tract)
# to this point, object is SF
sum <- summarize_fars(fars = xy, tract = tract, my_state = my_state)
# rejoin final to tract to create final SF?
final <- dplyr::full_join(tract, sum, by = "GEOID")
str(final)
head(final)
graphics::par(mar=c(2.5,0,2,0), mgp = c(0, 0, 0), xpd = TRUE)
cols <- c("#fff7bc", "#fec44f", "#d95f0e")
brks <- c(0, 1, 2, max(final$DeathsAll) + 1)
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
colcode <- classInt::findColours(cls, cols)
table(colcode)
brks
cls
brks <- as.numeric(names(table(final$DeathsAll)))
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
brks <- c(as.numeric(names(table(final$DeathsAll))),
max(final$DeathsAll) + 1) - .5
brks
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
fixedBreaks = brks)
cls <- classInt::classIntervals(final$DeathsAll, # style = "fixed",
fixedBreaks = brks)
cls
brks <- as.numeric(names(table(final$DeathsAll))) - .5
cls <- classInt::classIntervals(final$DeathsAll, # style = "fixed",
fixedBreaks = brks)
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed") # ,
?classInt::classIntervals
cls <- classInt::classIntervals(final$DeathsAll, style = "fixed",
n = length(brks)) # ,
colcode <- classInt::findColours(cls, cols)
table(colcode)
sf::plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
terra::plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
terra::plot(sf::st_geometry(xy), col = "#004529", pch = 20, add = TRUE)
terra::plot(sf::st_geometry(final), col = colcode,
main = "Choropleth of all deaths")
# do your points overlap your tracts?
terra::plot(sf::st_geometry(xy), pch = 20, add = TRUE, cex = 0.5,
col = rgb(0, 69, 41, max = 255, alpha = 125)) # "#004529"
terra::plot(sf::st_geometry(final), col = colcode, border = "grey",
main = "Choropleth of all deaths")
# do your points overlap your tracts?
terra::plot(sf::st_geometry(xy), pch = 20, add = TRUE, cex = 0.5,
col = rgb(0, 69, 41, max = 255, alpha = 200)) # "#004529"
terra::plot(sf::st_geometry(final), col = colcode, border = "#969696",
main = "Choropleth of all deaths")
# do your points overlap your tracts?
terra::plot(sf::st_geometry(xy), pch = 20, add = TRUE, cex = 0.5,
col = rgb(0, 69, 41, max = 255, alpha = 130)) # "#004529"
devtools::check()
devtools::check()
devtools::build()
remove.packages("cdccommdes", lib="~/R/win-library/4.1")
install.packages("C:/Users/AStamm/git/CDC_CWGs/cdccommdes_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::check()
chooseCRANmirror()
devtools::check()
install.packages("arcpullr")
devtools::check()
devtools::check()
devtools::build()
install.packages("C:/Users/AStamm/git/cdccommdes_0.1.6.tar.gz", repos = NULL, type = "source")
devtools::check()
devtools::check()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::check()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
devtools::build()
